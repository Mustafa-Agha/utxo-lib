"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCanonicalFormat = exports.toOutputScriptTryFormats = exports.toOutputScriptAndFormat = exports.toOutputScriptWithFormat = exports.fromOutputScriptWithFormat = exports.isSupportedAddressFormat = exports.addressFormats = void 0;
/**
 * Implements methods for nonstandard (non-canonical) address formats.
 *
 * Use `toOutputScriptTryFormats()` instead of `toOutputScript()` to parse addresses in
 * non-canonical formats
 */
const networks_1 = require("./networks");
const address_1 = require("./address");
const bitgo_1 = require("./bitgo");
exports.addressFormats = ['default', 'cashaddr'];
/**
 * @param format
 * @param network
 * @return true iff format is supported for network
 */
function isSupportedAddressFormat(format, network) {
    switch (format) {
        case 'default':
            return true;
        case 'cashaddr':
            return [networks_1.networks.bitcoincash, networks_1.networks.ecash].includes(networks_1.getMainnet(network));
    }
    throw new Error(`unknown address format ${format}`);
}
exports.isSupportedAddressFormat = isSupportedAddressFormat;
/**
 * @param outputScript
 * @param format
 * @param network
 * @return address formatted using provided AddressFormat
 */
function fromOutputScriptWithFormat(outputScript, format, network) {
    if (!isSupportedAddressFormat(format, network)) {
        throw new Error(`unsupported address format ${format} for network ${networks_1.getNetworkName(network)}`);
    }
    switch (networks_1.getMainnet(network)) {
        case networks_1.networks.bitcoincash:
        case networks_1.networks.ecash:
            return bitgo_1.bcashAddress.fromOutputScriptWithFormat(outputScript, format, network);
        default:
            return address_1.fromOutputScript(outputScript, network);
    }
}
exports.fromOutputScriptWithFormat = fromOutputScriptWithFormat;
/**
 * @param address
 * @param format
 * @param network
 * @return output script parsed with provided AddressFormat
 */
function toOutputScriptWithFormat(address, format, network) {
    if (!isSupportedAddressFormat(format, network)) {
        throw new Error(`unsupported address format ${format} for network ${networks_1.getNetworkName(network)}`);
    }
    switch (networks_1.getMainnet(network)) {
        case networks_1.networks.bitcoincash:
        case networks_1.networks.ecash:
            return bitgo_1.bcashAddress.toOutputScriptWithFormat(address, format, network);
        default:
            return address_1.toOutputScript(address, network);
    }
}
exports.toOutputScriptWithFormat = toOutputScriptWithFormat;
/**
 * Attempts to parse address with different address formats, returns first hit.
 * @param address
 * @param network
 * @param formats - defaults to all supported address formats for network
 * @return tuple with [AddressFormat, Buffer] containing format and parsed output script
 */
function toOutputScriptAndFormat(address, network, formats) {
    if (!formats) {
        formats = exports.addressFormats.filter((f) => isSupportedAddressFormat(f, network));
    }
    for (const format of formats) {
        try {
            return [format, toOutputScriptWithFormat(address, format, network)];
        }
        catch (e) {
            // try next
        }
    }
    throw new Error(`could not parse outputScript [formats=${formats}]`);
}
exports.toOutputScriptAndFormat = toOutputScriptAndFormat;
/**
 * Same as `toOutputScriptAndFormat`, only returning script
 * @param address - {@see toOutputScriptAndFormat}
 * @param network - {@see toOutputScriptAndFormat}
 * @param formats - {@see toOutputScriptAndFormat}
 * @return parsed output script
 */
function toOutputScriptTryFormats(address, network, formats) {
    const [, outputScript] = toOutputScriptAndFormat(address, network, formats);
    return outputScript;
}
exports.toOutputScriptTryFormats = toOutputScriptTryFormats;
/**
 * @param address
 * @param network
 * @return address in canonical format
 */
function toCanonicalFormat(address, network) {
    return address_1.fromOutputScript(toOutputScriptTryFormats(address, network), network);
}
exports.toCanonicalFormat = toCanonicalFormat;
//# sourceMappingURL=data:application/json;base64,