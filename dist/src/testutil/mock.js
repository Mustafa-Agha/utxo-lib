"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockUnspents = exports.mockWalletUnspent = exports.mockReplayProtectionUnspent = exports.isReplayProtectionUnspent = exports.replayProtectionKeyPair = exports.mockPrevTx = void 0;
const noble = require("@noble/secp256k1");
const utxolib = require("..");
const networks_1 = require("../networks");
const bitgo_1 = require("../bitgo");
const address_1 = require("../address");
const outputScripts_1 = require("../bitgo/outputScripts");
const keys_1 = require("./keys");
function mockPrevTx(vout, outputScript, value, network) {
    const psbtFromNetwork = bitgo_1.createPsbtForNetwork({ network });
    const privKey = noble.utils.randomPrivateKey();
    const pubkey = Buffer.from(noble.getPublicKey(privKey, true));
    const payment = utxolib.payments.p2wpkh({ pubkey });
    const destOutput = payment.output;
    if (!destOutput)
        throw new Error('Impossible, payment we just constructed has no output');
    for (let index = 0; index <= vout; index++) {
        if (index === vout) {
            psbtFromNetwork.addOutput({ script: outputScript, value });
        }
        else {
            psbtFromNetwork.addOutput({ script: destOutput, value });
        }
    }
    psbtFromNetwork.addInput({
        hash: Buffer.alloc(32, 0x01),
        index: 0,
        witnessUtxo: { script: destOutput, value: value * (BigInt(vout) + BigInt(1)) + BigInt(1000) },
    });
    psbtFromNetwork.signInput(0, {
        publicKey: pubkey,
        sign: (hash, lowR) => Buffer.from(noble.signSync(hash, privKey, { canonical: !lowR, der: false })),
    });
    psbtFromNetwork.validateSignaturesOfAllInputs();
    psbtFromNetwork.finalizeAllInputs();
    return psbtFromNetwork.extractTransaction();
}
exports.mockPrevTx = mockPrevTx;
exports.replayProtectionKeyPair = keys_1.getKey('replay-protection');
const replayProtectionScriptPubKey = outputScripts_1.createOutputScriptP2shP2pk(exports.replayProtectionKeyPair.publicKey).scriptPubKey;
function isReplayProtectionUnspent(u, network) {
    return u.address === address_1.fromOutputScript(replayProtectionScriptPubKey, network);
}
exports.isReplayProtectionUnspent = isReplayProtectionUnspent;
function mockReplayProtectionUnspent(network, value, { key = exports.replayProtectionKeyPair, vout = 0 } = {}) {
    const outputScript = outputScripts_1.createOutputScriptP2shP2pk(key.publicKey).scriptPubKey;
    const prevTransaction = mockPrevTx(vout, outputScript, BigInt(value), network);
    return { ...bitgo_1.fromOutputWithPrevTx(prevTransaction, vout), value };
}
exports.mockReplayProtectionUnspent = mockReplayProtectionUnspent;
function mockWalletUnspent(network, value, { chain = 0, index = 0, keys = keys_1.getDefaultWalletKeys(), vout = 0, id, } = {}) {
    const derivedKeys = keys.deriveForChainAndIndex(chain, index);
    const address = address_1.fromOutputScript(outputScripts_1.createOutputScript2of3(derivedKeys.publicKeys, bitgo_1.scriptTypeForChain(chain)).scriptPubKey, network);
    if (id && typeof id === 'string') {
        return { id, address, chain, index, value };
    }
    else {
        const prevTransaction = mockPrevTx(vout, outputScripts_1.createOutputScript2of3(derivedKeys.publicKeys, bitgo_1.scriptTypeForChain(chain), network).scriptPubKey, BigInt(value), network);
        const unspent = bitgo_1.isSegwit(chain) || networks_1.getMainnet(network) === networks_1.networks.zcash
            ? bitgo_1.fromOutput(prevTransaction, vout)
            : bitgo_1.fromOutputWithPrevTx(prevTransaction, vout);
        return {
            ...unspent,
            chain,
            index,
            value,
        };
    }
}
exports.mockWalletUnspent = mockWalletUnspent;
function mockUnspents(rootWalletKeys, inputScriptTypes, testOutputAmount, network) {
    return inputScriptTypes.map((t, i) => {
        if (bitgo_1.outputScripts.isScriptType2Of3(t)) {
            return mockWalletUnspent(network, testOutputAmount, {
                keys: rootWalletKeys,
                chain: bitgo_1.getExternalChainCode(t),
                vout: i,
            });
        }
        throw new Error(`invalid input type ${t}`);
    });
}
exports.mockUnspents = mockUnspents;
//# sourceMappingURL=data:application/json;base64,