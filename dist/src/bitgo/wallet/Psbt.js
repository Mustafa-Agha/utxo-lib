"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePsbtInput = exports.signWalletPsbt = exports.toWalletPsbt = void 0;
const outputScripts_1 = require("../outputScripts");
const Unspent_1 = require("../Unspent");
const transaction_1 = require("../transaction");
const Unspent_2 = require("./Unspent");
const utils_1 = require("bip174/src/lib/utils");
const parseInput_1 = require("../parseInput");
function getTaprootSigners(script, walletKeys) {
    const parsedPublicKeys = parseInput_1.parsePubScript(script, 'p2tr').publicKeys;
    const walletSigners = parsedPublicKeys.map((publicKey) => {
        const index = walletKeys.publicKeys.findIndex((walletPublicKey) => outputScripts_1.toXOnlyPublicKey(walletPublicKey).equals(publicKey));
        if (index >= 0) {
            return { walletKey: walletKeys.triple[index], rootKey: walletKeys.parent.triple[index] };
        }
        throw new Error('Taproot public key is not a wallet public key');
    });
    return [walletSigners[0], walletSigners[1]];
}
function updatePsbtInput(psbt, inputIndex, unspent, rootWalletKeys) {
    const signatureCount = psbt.getSignatureCount(inputIndex);
    const scriptType = outputScripts_1.scriptTypeForChain(unspent.chain);
    if (signatureCount === 0 && scriptType === 'p2tr') {
        return;
    }
    const walletKeys = rootWalletKeys.deriveForChainAndIndex(unspent.chain, unspent.index);
    if (scriptType === 'p2tr') {
        const input = psbt.data.inputs[inputIndex];
        if (!Array.isArray(input.tapLeafScript) || input.tapLeafScript.length === 0) {
            throw new Error('Invalid PSBT state. Missing required fields.');
        }
        if (input.tapLeafScript.length > 1) {
            throw new Error('Bitgo only supports a single tap leaf script per input');
        }
        const [signer, cosigner] = getTaprootSigners(input.tapLeafScript[0].script, walletKeys);
        const leafHash = outputScripts_1.getLeafHash({
            publicKeys: walletKeys.publicKeys,
            signer: signer.walletKey.publicKey,
            cosigner: cosigner.walletKey.publicKey,
        });
        psbt.updateInput(inputIndex, {
            tapBip32Derivation: [signer, cosigner].map((walletSigner) => ({
                leafHashes: [leafHash],
                pubkey: outputScripts_1.toXOnlyPublicKey(walletSigner.walletKey.publicKey),
                path: rootWalletKeys.getDerivationPath(walletSigner.rootKey, unspent.chain, unspent.index),
                masterFingerprint: walletSigner.rootKey.fingerprint,
            })),
        });
    }
    else {
        if (signatureCount === 0) {
            const { witnessScript, redeemScript } = outputScripts_1.createOutputScript2of3(walletKeys.publicKeys, scriptType);
            if (witnessScript && psbt.data.inputs[inputIndex].witnessScript === undefined) {
                psbt.updateInput(inputIndex, { witnessScript });
            }
            if (redeemScript && psbt.data.inputs[inputIndex].redeemScript === undefined) {
                psbt.updateInput(inputIndex, { redeemScript });
            }
        }
        psbt.updateInput(inputIndex, {
            bip32Derivation: [0, 1, 2].map((idx) => ({
                pubkey: walletKeys.triple[idx].publicKey,
                path: walletKeys.paths[idx],
                masterFingerprint: rootWalletKeys.triple[idx].fingerprint,
            })),
        });
    }
}
/**
 * @return PSBT filled with metatdata as per input params tx, unspents and rootWalletKeys.
 * Unsigned PSBT for taproot input with witnessUtxo
 * Unsigned PSBT for other input with witnessUtxo/nonWitnessUtxo, redeemScript/witnessScript, bip32Derivation
 * Signed PSBT for taproot input with witnessUtxo, tapLeafScript, tapBip32Derivation, tapScriptSig
 * Signed PSBT for other input with witnessUtxo/nonWitnessUtxo, redeemScript/witnessScript, bip32Derivation, partialSig
 */
function toWalletPsbt(tx, unspents, rootWalletKeys) {
    const prevOutputs = unspents.map((u) => Unspent_1.toPrevOutputWithPrevTx(u, tx.network));
    const psbt = transaction_1.createPsbtFromTransaction(tx, prevOutputs);
    unspents.forEach((u, i) => {
        if (Unspent_2.isWalletUnspent(u) && u.index !== undefined) {
            updatePsbtInput(psbt, i, u, rootWalletKeys);
        }
    });
    return psbt;
}
exports.toWalletPsbt = toWalletPsbt;
/**
 * @param psbt
 * @param inputIndex
 * @param signer
 * @param unspent
 * @return signed PSBT with signer's key for unspent
 */
function signWalletPsbt(psbt, inputIndex, signer, unspent) {
    if (outputScripts_1.scriptTypeForChain(unspent.chain) === 'p2tr') {
        psbt.signTaprootInputHD(inputIndex, signer);
    }
    else {
        psbt.signInputHD(inputIndex, signer);
    }
}
exports.signWalletPsbt = signWalletPsbt;
function classifyScriptType(input) {
    let scriptType;
    if (Buffer.isBuffer(input.redeemScript) && Buffer.isBuffer(input.witnessScript)) {
        scriptType = 'p2shP2wsh';
    }
    else if (Buffer.isBuffer(input.redeemScript)) {
        scriptType = 'p2sh';
    }
    else if (Buffer.isBuffer(input.witnessScript)) {
        scriptType = 'p2wsh';
    }
    if (Array.isArray(input.tapLeafScript) && input.tapLeafScript.length > 0) {
        if (scriptType) {
            throw new Error(`Found both ${scriptType} and p2tr PSBT metadata.`);
        }
        if (input.tapLeafScript.length > 1) {
            throw new Error('Bitgo only supports a single tap leaf script per input.');
        }
        scriptType = 'p2tr';
    }
    return scriptType;
}
function parseSignatures(input, scriptType) {
    const validate = (sig) => {
        if (Buffer.isBuffer(sig)) {
            return sig;
        }
        throw new Error('Invalid signature type');
    };
    if (scriptType === 'p2tr') {
        if (input.partialSig && input.partialSig.length > 0) {
            throw new Error('Invalid PSBT signature state');
        }
        if (!input.tapScriptSig || input.tapScriptSig.length === 0) {
            return undefined;
        }
        if (input.tapScriptSig.length > 2) {
            throw new Error('unexpected signature count');
        }
        return input.tapScriptSig.length === 1
            ? [validate(input.tapScriptSig[0].signature)]
            : [validate(input.tapScriptSig[0].signature), validate(input.tapScriptSig[1].signature)];
    }
    if (input.tapScriptSig && input.tapScriptSig.length > 0) {
        throw new Error('Invalid PSBT signature state');
    }
    if (!input.partialSig || input.partialSig.length === 0) {
        return undefined;
    }
    if (input.partialSig.length > 2) {
        throw new Error('unexpected signature count');
    }
    return input.partialSig.length === 1
        ? [validate(input.partialSig[0].signature)]
        : [validate(input.partialSig[0].signature), validate(input.partialSig[1].signature)];
}
function parseScript(input, scriptType) {
    let pubScript;
    if (scriptType === 'p2sh') {
        pubScript = input.redeemScript;
    }
    else if (scriptType === 'p2wsh' || scriptType === 'p2shP2wsh') {
        pubScript = input.witnessScript;
    }
    else {
        pubScript = input.tapLeafScript ? input.tapLeafScript[0].script : undefined;
    }
    if (!pubScript) {
        throw new Error(`Invalid PSBT state for ${scriptType}. Missing required fields.`);
    }
    return parseInput_1.parsePubScript(pubScript, scriptType);
}
function parseInputMetadata(input, scriptType) {
    const parsedPubScript = parseScript(input, scriptType);
    const signatures = parseSignatures(input, scriptType);
    if (parsedPubScript.scriptType === 'p2tr') {
        if (!input.tapLeafScript) {
            throw new Error('Invalid PSBT state for p2tr. Missing required fields.');
        }
        const controlBlock = input.tapLeafScript[0].controlBlock;
        if (!parseInput_1.isValidControlBock(controlBlock)) {
            throw new Error('Invalid PSBT p2tr script path controlBlock.');
        }
        const scriptPathLevel = parseInput_1.calculateScriptPathLevel(controlBlock);
        const leafVersion = parseInput_1.getScriptPathLevel(controlBlock);
        return {
            ...parsedPubScript,
            signatures,
            controlBlock,
            scriptPathLevel,
            leafVersion,
        };
    }
    else {
        if (parsedPubScript.scriptType === 'p2shP2wsh') {
            parsedPubScript.redeemScript = input.redeemScript;
        }
        return {
            ...parsedPubScript,
            signatures,
        };
    }
}
/**
 * @return psbt metadata are parsed as per below conditions.
 * redeemScript/witnessScript/tapLeafScript matches BitGo.
 * signature and public key count matches BitGo.
 * P2SH => scriptType, redeemScript, public keys, signatures.
 * PW2SH => scriptType, witnessScript, public keys, signatures.
 * P2SH-PW2SH => scriptType, redeemScript, witnessScript, public keys, signatures.
 * P2TR => scriptType, pubScript (witnessScript), controlBlock, scriptPathLevel, leafVersion, public keys, signatures.
 * Any unsigned PSBT and without required metadata is returned with undefined.
 */
function parsePsbtInput(psbt, inputIndex) {
    const input = utils_1.checkForInput(psbt.data.inputs, inputIndex);
    if (psbt.isInputFinalized(inputIndex)) {
        throw new Error('Finalized PSBT parsing is not supported');
    }
    const scriptType = classifyScriptType(input);
    if (!scriptType) {
        if (psbt.getSignatureCount(inputIndex) > 0) {
            throw new Error('Invalid PSBT state. Signatures found without scripts.');
        }
        return undefined;
    }
    return parseInputMetadata(input, scriptType);
}
exports.parsePsbtInput = parsePsbtInput;
//# sourceMappingURL=data:application/json;base64,